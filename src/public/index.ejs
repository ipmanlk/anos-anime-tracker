<!DOCTYPE html>
<html lang="en">

<head>
  <title>Anime List</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="./css/bootstrap.min.css">
  <script src="./js/jquery-3.5.1.min.js"></script>
  <script src="./js/bootstrap.bundle.min.js"></script>

  <style>
    .tab-pane {
      padding-left: 0 !important;
      padding-right: 0 !important;
    }

    .anime-list-icon {
      height: 80px;
      margin-right: 10px;
    }

    .list-group-item {
      padding: 0;
    }

    .tab-content .container {
      margin-left: 0;
      margin-right: 0;
    }

    .list-group-item:hover {
      background-color: rgb(211, 211, 211);
    }
  </style>
</head>

<body>
  <nav class="navbar navbar-expand-sm bg-dark navbar-dark">
    <a class="navbar-brand mr-auto" href="#">Anos</a>
    <div>
      <button class="btn btn-warning" id="btnAuth">Authenticate</button>
      <button class="btn btn-success" id="btnSync">Sync</button>
    </div>
  </nav>


  <div class="container-fluid mt-2">
    <!-- Nav tabs -->
    <ul class="nav nav-tabs">
      <li class="nav-item">
        <a class="nav-link active" data-toggle="tab" href="#current">Current</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" data-toggle="tab" href="#planning">Planning</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" data-toggle="tab" href="#completed">Completed</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" data-toggle="tab" href="#dropped">Dropped</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" data-toggle="tab" href="#paused">Paused</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" data-toggle="tab" href="#repeating">Repeating</a>
      </li>
    </ul>


    <!-- Tab panes -->
    <div class="tab-content">
      <div class="tab-pane container active" id="current">
        <ul class="list-group">
          <% animeList.CURRENT.forEach(function(i){ %>
          <li class="list-group-item" data-anime="<%= JSON.stringify(i) %>">
            <div class="d-flex flex-row align-items-center">
              <div class="mr-auto">
                <img src="<%= i.media.coverImage.medium %>" class="anime-list-icon" />
                <%= i.media.title.english || i.media.title.romaji %>
              </div>

              <div class="p-3" id="<%= i.media.id %>Progress">
                <%= i.progress %>/<%= i.media.episodes %>
              </div>
              <div class="p-3">
                <button class="btn btn-primary" onclick="updateProgress(this, 'dec')">
                  -
                </button>
                <button class="btn btn-primary" onclick="updateProgress(this, 'inc')">
                  +
                </button>
              </div>
            </div>
          </li>
          <% }); %>
        </ul>
      </div>

    </div>
  </div>

  <!-- auth model -->
  <div class="modal" id="modalAuth">
    <div class="modal-dialog">
      <div class="modal-content">

        <div class="modal-header">
          <h4 class="modal-title">Authenticate</h4>
          <button type="button" class="close" data-dismiss="modal">&times;</button>
        </div>

        <div class="modal-body">
          <form onsubmit="return false;">
            <div class="from-group">
              <label for="txtMalAuthCode">
                MAL Auth Code:
              </label>
              <input type="text" class="form-control" id="txtMalAuthCode">
              <button id="btnGenMalAuthCode" class="btn btn-primary btn-block mt-2">
                Generate
              </button>
            </div>
            <hr>
            <div class="from-group">
              <label for="txtAnilistToken">
                Anilist Username:
              </label>
              <input type="text" class="form-control" id="txtAnilistUsername">
            </div>
            <div class="from-group mt-2">
              <label for="txtAnilistToken">
                Anilist Token:
              </label>
              <input type="text" class="form-control" id="txtAnilistToken">
              <button id="btnGenAnilistToken" class="btn btn-primary btn-block mt-2">
                Generate
              </button>
            </div>
          </form>
        </div>

        <div class="modal-footer">
          <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
          <button id="btnSaveAuthInfo" type="button" class="btn btn-success" data-dismiss="modal">Save</button>
        </div>

      </div>
    </div>

    <script>
      // store pending changes to be applied
      const changes = {};

      // common request options for all requests
      const requestOptions = {
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
      };

      // append to changes global object
      const addToChanges = (id, func) => {
        changes[id] = func;
        $("#btnSync").text(`Sync (${Object.keys(changes).length} Changes)`)
      }

      // sync local changes and update anime list
      const syncChanges = async () => {
        const keys = Object.keys(changes);

        for (let key of keys) {
          const func = changes[key];
          await func();
          delete changes[key];
        }

        updateAnimeList();

        $("#btnSync").text("Sync");
      }

      // sync anime list without cache from anilist
      const updateAnimeList = () => {
        fetch("/update_anime_list").then(res => {
          return res.json();
        }).then(data => {
          if (data.status) {
            setTimeout(() => window.location.reload(), 700);
          } else {
            console.log(data.error);
          }
        }).catch(e => {
          console.log(e);
        })
      }

      // update progress for a selected anime
      const updateProgress = async (btn, type) => {
        const listItem = $(btn).parent().parent().parent();
        const mediaData = listItem.data("anime");

        let progress = parseInt($(`#${mediaData.media.id}Progress`).text().split("/")[0]);

        if (type == "inc") {
          progress++;
          if (progress > mediaData.media.episodes) return;
        } else {
          progress--;
          if (progress < 0) return;
        }

        if (mediaData.progress != mediaData.media.episodes) {

          $(`#${mediaData.media.id}Progress`).text(`${progress}/${mediaData.media.episodes}`);

          addToChanges(mediaData.media.id,
            async function () {
              try {
                const res = await fetch("/update_progress", {
                  ...requestOptions,
                  method: "put",
                  body: JSON.stringify({
                    mediaId: mediaData.media.id,
                    episodes: mediaData.media.episodes,
                    malId: mediaData.media.idMal,
                    progress: parseInt(mediaData.progress) + 1
                  }),
                });

                const parsedResponse = await res.json();
                const data = parsedResponse.data;

              } catch (e) {
                console.log(e);
              }
            })
        }
      }


      const loadAnilistTokenUrl = () => {
        fetch("/anilist_auth_link").then(res => {
          return res.json();
        }).then(d => {
          window.open(d.data, '_blank');
        }).catch(e => {
          console.log(e);
        });
      }

      const loadMalTokenUrl = () => {
        fetch("/mal_auth_link").then(res => {
          return res.json();
        }).then(d => {
          window.open(d.data, '_blank');
        }).catch(e => {
          console.log(e);
        })
      }

      const saveAuthInfo = () => {
        fetch("/auth", {
          ...requestOptions,
          method: "post",
          body: JSON.stringify({
            mal: { authenticationCode: $("#txtMalAuthCode").val() },
            anilist: {
              username: $("#txtAnilistUsername").val(),
              token: $("#txtAnilistToken").val()
            }
          }),
        }).then(res => {
          return res.json();
        }).then(data => {
          if (data.status) {
            window.alert("Authentication info saved!.");
            $("#modalAuth").modal("hide");
          } else {
            console.log(data);
            window.alert("Something went wrong!.");
          }
        }).catch(e => {
          console.log(e);
        });
      }

      // event listeners
      $("#btnSync").click(syncChanges);
      $("#btnAuth").click(() => {
        $("#modalAuth").modal("show");
      });
      $("#btnGenMalAuthCode").click(loadMalTokenUrl);
      $("#btnGenAnilistToken").click(loadAnilistTokenUrl);

      $("#btnSaveAuthInfo").click(saveAuthInfo);
    </script>

</body>

</html>